PInvoke.NTDll
PInvoke.NTDll.OBJECT_ATTRIBUTES
PInvoke.NTDll.OBJECT_ATTRIBUTES.Attributes -> PInvoke.NTDll.OBJECT_ATTRIBUTES.ObjectHandleAttributes
PInvoke.NTDll.OBJECT_ATTRIBUTES.Length -> int
PInvoke.NTDll.OBJECT_ATTRIBUTES.OBJECT_ATTRIBUTES() -> void
PInvoke.NTDll.OBJECT_ATTRIBUTES.ObjectHandleAttributes
PInvoke.NTDll.OBJECT_ATTRIBUTES.ObjectHandleAttributes.OBJ_CASE_INSENSITIVE = 64 -> PInvoke.NTDll.OBJECT_ATTRIBUTES.ObjectHandleAttributes
PInvoke.NTDll.OBJECT_ATTRIBUTES.ObjectHandleAttributes.OBJ_EXCLUSIVE = 32 -> PInvoke.NTDll.OBJECT_ATTRIBUTES.ObjectHandleAttributes
PInvoke.NTDll.OBJECT_ATTRIBUTES.ObjectHandleAttributes.OBJ_FORCE_ACCESS_CHECK = 1024 -> PInvoke.NTDll.OBJECT_ATTRIBUTES.ObjectHandleAttributes
PInvoke.NTDll.OBJECT_ATTRIBUTES.ObjectHandleAttributes.OBJ_INHERIT = 2 -> PInvoke.NTDll.OBJECT_ATTRIBUTES.ObjectHandleAttributes
PInvoke.NTDll.OBJECT_ATTRIBUTES.ObjectHandleAttributes.OBJ_KERNEL_HANDLE = 512 -> PInvoke.NTDll.OBJECT_ATTRIBUTES.ObjectHandleAttributes
PInvoke.NTDll.OBJECT_ATTRIBUTES.ObjectHandleAttributes.OBJ_OPENIF = 128 -> PInvoke.NTDll.OBJECT_ATTRIBUTES.ObjectHandleAttributes
PInvoke.NTDll.OBJECT_ATTRIBUTES.ObjectHandleAttributes.OBJ_OPENLINK = 256 -> PInvoke.NTDll.OBJECT_ATTRIBUTES.ObjectHandleAttributes
PInvoke.NTDll.OBJECT_ATTRIBUTES.ObjectHandleAttributes.OBJ_PERMANENT = 16 -> PInvoke.NTDll.OBJECT_ATTRIBUTES.ObjectHandleAttributes
PInvoke.NTDll.OBJECT_ATTRIBUTES.ObjectHandleAttributes.OBJ_VALID_ATTRIBUTES = PInvoke.NTDll.OBJECT_ATTRIBUTES.ObjectHandleAttributes.OBJ_INHERIT | PInvoke.NTDll.OBJECT_ATTRIBUTES.ObjectHandleAttributes.OBJ_PERMANENT | PInvoke.NTDll.OBJECT_ATTRIBUTES.ObjectHandleAttributes.OBJ_EXCLUSIVE | PInvoke.NTDll.OBJECT_ATTRIBUTES.ObjectHandleAttributes.OBJ_CASE_INSENSITIVE | PInvoke.NTDll.OBJECT_ATTRIBUTES.ObjectHandleAttributes.OBJ_OPENIF | PInvoke.NTDll.OBJECT_ATTRIBUTES.ObjectHandleAttributes.OBJ_OPENLINK | PInvoke.NTDll.OBJECT_ATTRIBUTES.ObjectHandleAttributes.OBJ_KERNEL_HANDLE | PInvoke.NTDll.OBJECT_ATTRIBUTES.ObjectHandleAttributes.OBJ_FORCE_ACCESS_CHECK -> PInvoke.NTDll.OBJECT_ATTRIBUTES.ObjectHandleAttributes
PInvoke.NTDll.OBJECT_ATTRIBUTES.ObjectName -> PInvoke.NTDll.UNICODE_STRING*
PInvoke.NTDll.OBJECT_ATTRIBUTES.ObjectName_IntPtr.get -> System.IntPtr
PInvoke.NTDll.OBJECT_ATTRIBUTES.ObjectName_IntPtr.set -> void
PInvoke.NTDll.OBJECT_ATTRIBUTES.RootDirectory -> System.IntPtr
PInvoke.NTDll.OBJECT_ATTRIBUTES.SecurityDescriptor -> PInvoke.Kernel32.SECURITY_DESCRIPTOR*
PInvoke.NTDll.OBJECT_ATTRIBUTES.SecurityDescriptor_IntPtr.get -> System.IntPtr
PInvoke.NTDll.OBJECT_ATTRIBUTES.SecurityDescriptor_IntPtr.set -> void
PInvoke.NTDll.OBJECT_ATTRIBUTES.SecurityQualityOfService -> void*
PInvoke.NTDll.OBJECT_ATTRIBUTES.SecurityQualityOfService_IntPtr.get -> System.IntPtr
PInvoke.NTDll.OBJECT_ATTRIBUTES.SecurityQualityOfService_IntPtr.set -> void
PInvoke.NTDll.SafeNTObjectHandle
PInvoke.NTDll.SafeNTObjectHandle.SafeNTObjectHandle() -> void
PInvoke.NTDll.SafeNTObjectHandle.SafeNTObjectHandle(System.IntPtr preexistingHandle, bool ownsHandle = true) -> void
PInvoke.NTDll.UNICODE_STRING
PInvoke.NTDll.UNICODE_STRING.Buffer -> char*
PInvoke.NTDll.UNICODE_STRING.Buffer_IntPtr.get -> System.IntPtr
PInvoke.NTDll.UNICODE_STRING.Buffer_IntPtr.set -> void
PInvoke.NTDll.UNICODE_STRING.Length -> ushort
PInvoke.NTDll.UNICODE_STRING.MaximumLength -> ushort
PInvoke.NTDll.UNICODE_STRING.UNICODE_STRING() -> void
override PInvoke.NTDll.SafeNTObjectHandle.IsInvalid.get -> bool
override PInvoke.NTDll.SafeNTObjectHandle.ReleaseHandle() -> bool
static PInvoke.NTDll.NtOpenSection(out PInvoke.NTDll.SafeNTObjectHandle sectionHandle, PInvoke.Kernel32.ACCESS_MASK desiredAccess, PInvoke.NTDll.OBJECT_ATTRIBUTES objectAttributes) -> PInvoke.NTSTATUS
static PInvoke.NTDll.NtOpenSection(out PInvoke.NTDll.SafeNTObjectHandle sectionHandle, PInvoke.Kernel32.ACCESS_MASK desiredAccess, System.IntPtr objectAttributes) -> PInvoke.NTSTATUS
static PInvoke.NTDll.OBJECT_ATTRIBUTES.Create() -> PInvoke.NTDll.OBJECT_ATTRIBUTES
static extern PInvoke.NTDll.NtOpenSection(out PInvoke.NTDll.SafeNTObjectHandle sectionHandle, PInvoke.Kernel32.ACCESS_MASK desiredAccess, PInvoke.NTDll.OBJECT_ATTRIBUTES* objectAttributes) -> PInvoke.NTSTATUS
static extern PInvoke.NTDll.RtlNtStatusToDosError(PInvoke.NTSTATUS Status) -> PInvoke.Win32ErrorCode
static readonly PInvoke.NTDll.SafeNTObjectHandle.Null -> PInvoke.NTDll.SafeNTObjectHandle
static extern PInvoke.NTDll.RtlVerifyVersionInfo(PInvoke.Kernel32.OSVERSIONINFOEX* VersionInfo, PInvoke.Kernel32.VER_MASK TypeMask, long ConditionMask) -> PInvoke.NTSTATUS
static PInvoke.NTDll.RtlVerifyVersionInfo(ref PInvoke.Kernel32.OSVERSIONINFOEX VersionInfo, PInvoke.Kernel32.VER_MASK TypeMask, long ConditionMask) -> PInvoke.NTSTATUS
static PInvoke.NTDll.RtlVerifyVersionInfo(System.IntPtr VersionInfo, PInvoke.Kernel32.VER_MASK TypeMask, long ConditionMask) -> PInvoke.NTSTATUS
