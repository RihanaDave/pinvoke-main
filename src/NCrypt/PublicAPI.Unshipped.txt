static PInvoke.NCrypt.NCryptDecrypt(PInvoke.NCrypt.SafeKeyHandle hKey, System.ReadOnlySpan<byte> pbInput, System.IntPtr pPaddingInfo, System.Span<byte> pbOutput, out int pcbResult, PInvoke.NCrypt.NCryptEncryptFlags dwFlags) -> PInvoke.NCrypt.SECURITY_STATUS
static PInvoke.NCrypt.NCryptDecrypt(PInvoke.NCrypt.SafeKeyHandle hKey, System.ReadOnlySpan<byte> pbInput, void* pPaddingInfo, System.Span<byte> pbOutput, out int pcbResult, PInvoke.NCrypt.NCryptEncryptFlags dwFlags) -> PInvoke.NCrypt.SECURITY_STATUS
static PInvoke.NCrypt.NCryptDeriveKey(PInvoke.NCrypt.SafeSecretHandle hSharedSecret, string pwszKDF, PInvoke.NCrypt.NCryptBufferDesc* pParameterList, System.Span<byte> pbDerivedKey, out int pcbResult, PInvoke.NCrypt.NCryptDeriveKeyFlags dwFlags = PInvoke.NCrypt.NCryptDeriveKeyFlags.None) -> PInvoke.NCrypt.SECURITY_STATUS
static PInvoke.NCrypt.NCryptDeriveKey(PInvoke.NCrypt.SafeSecretHandle hSharedSecret, string pwszKDF, System.IntPtr pParameterList, System.Span<byte> pbDerivedKey, out int pcbResult, PInvoke.NCrypt.NCryptDeriveKeyFlags dwFlags = PInvoke.NCrypt.NCryptDeriveKeyFlags.None) -> PInvoke.NCrypt.SECURITY_STATUS
static PInvoke.NCrypt.NCryptEncrypt(PInvoke.NCrypt.SafeKeyHandle hKey, System.ReadOnlySpan<byte> pbInput, System.IntPtr pPaddingInfo, System.Span<byte> pbOutput, out int pcbResult, PInvoke.NCrypt.NCryptEncryptFlags dwFlags = PInvoke.NCrypt.NCryptEncryptFlags.None) -> PInvoke.NCrypt.SECURITY_STATUS
static PInvoke.NCrypt.NCryptEncrypt(PInvoke.NCrypt.SafeKeyHandle hKey, System.ReadOnlySpan<byte> pbInput, void* pPaddingInfo, System.Span<byte> pbOutput, out int pcbResult, PInvoke.NCrypt.NCryptEncryptFlags dwFlags = PInvoke.NCrypt.NCryptEncryptFlags.None) -> PInvoke.NCrypt.SECURITY_STATUS
static PInvoke.NCrypt.NCryptImportKey(PInvoke.NCrypt.SafeProviderHandle hProvider, PInvoke.NCrypt.SafeKeyHandle hImportKey, string pszBlobType, PInvoke.NCrypt.NCryptBufferDesc* pParameterList, out PInvoke.NCrypt.SafeKeyHandle phKey, System.ReadOnlySpan<byte> pbData, PInvoke.NCrypt.NCryptExportKeyFlags dwFlags = PInvoke.NCrypt.NCryptExportKeyFlags.None) -> PInvoke.NCrypt.SECURITY_STATUS
static PInvoke.NCrypt.NCryptImportKey(PInvoke.NCrypt.SafeProviderHandle hProvider, PInvoke.NCrypt.SafeKeyHandle hImportKey, string pszBlobType, System.IntPtr pParameterList, out PInvoke.NCrypt.SafeKeyHandle phKey, System.ReadOnlySpan<byte> pbData, PInvoke.NCrypt.NCryptExportKeyFlags dwFlags = PInvoke.NCrypt.NCryptExportKeyFlags.None) -> PInvoke.NCrypt.SECURITY_STATUS
static PInvoke.NCrypt.NCryptKeyDerivation(PInvoke.NCrypt.SafeKeyHandle hKey, PInvoke.NCrypt.NCryptBufferDesc* pParameterList, System.Span<byte> pbDerivedKey, out int pcbResult, PInvoke.NCrypt.NCryptKeyDerivationFlags dwFlags = PInvoke.NCrypt.NCryptKeyDerivationFlags.None) -> PInvoke.NCrypt.SECURITY_STATUS
static PInvoke.NCrypt.NCryptKeyDerivation(PInvoke.NCrypt.SafeKeyHandle hKey, System.IntPtr pParameterList, System.Span<byte> pbDerivedKey, out int pcbResult, PInvoke.NCrypt.NCryptKeyDerivationFlags dwFlags = PInvoke.NCrypt.NCryptKeyDerivationFlags.None) -> PInvoke.NCrypt.SECURITY_STATUS
static PInvoke.NCrypt.NCryptSetProperty(System.Runtime.InteropServices.SafeHandle hObject, string pszProperty, System.ReadOnlySpan<byte> pbInput, PInvoke.NCrypt.NCryptSetPropertyFlags dwFlags) -> PInvoke.NCrypt.SECURITY_STATUS
static PInvoke.NCrypt.NCryptSignHash(PInvoke.NCrypt.SafeKeyHandle hKey, System.IntPtr pPaddingInfo, System.ReadOnlySpan<byte> pbHashValue, System.Span<byte> pbSignature, out int pcbResult, PInvoke.NCrypt.NCryptSignHashFlags dwFlags) -> PInvoke.NCrypt.SECURITY_STATUS
static PInvoke.NCrypt.NCryptSignHash(PInvoke.NCrypt.SafeKeyHandle hKey, void* pPaddingInfo, System.ReadOnlySpan<byte> pbHashValue, System.Span<byte> pbSignature, out int pcbResult, PInvoke.NCrypt.NCryptSignHashFlags dwFlags) -> PInvoke.NCrypt.SECURITY_STATUS
static PInvoke.NCrypt.NCryptVerifySignature(PInvoke.NCrypt.SafeKeyHandle hKey, System.IntPtr pPaddingInfo, System.ReadOnlySpan<byte> pbHashValue, System.ReadOnlySpan<byte> pbSignature, PInvoke.NCrypt.NCryptSignHashFlags dwFlags = PInvoke.NCrypt.NCryptSignHashFlags.None) -> PInvoke.NCrypt.SECURITY_STATUS
static PInvoke.NCrypt.NCryptVerifySignature(PInvoke.NCrypt.SafeKeyHandle hKey, void* pPaddingInfo, System.ReadOnlySpan<byte> pbHashValue, System.ReadOnlySpan<byte> pbSignature, PInvoke.NCrypt.NCryptSignHashFlags dwFlags = PInvoke.NCrypt.NCryptSignHashFlags.None) -> PInvoke.NCrypt.SECURITY_STATUS